#!/usr/bin/env node

/**
 * Module dependencies.
 */

let app = require('../app')
let debug = require('debug')('yass-shortener:server')
let http = require('http')
let https = require('https')
let fs = require('fs')
/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '8000')
app.set('port', port)

/**
 * Create HTTP server.
 */

let server = http.createServer(app)

let options = {
    cert: fs.readFileSync('/etc/letsencrypt/live/yaas.ml/fullchain.pem'),
    key: fs.readFileSync('/etc/letsencrypt/live/yaas.ml/privkey.pem'),
}
/**
 * Create HTTPS Server
 */
let httpsServer = https.createServer(options, app)

/**
 * Listen on provided port, on all network interfaces.
 */

httpsServer.listen(port)
httpsServer.on('error', onError)
httpsServer.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    let port = parseInt(val, 10)

    if (isNaN(port)) {
        // named pipe
        return val
    }

    if (port >= 0) {
        // port number
        return port
    }

    return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error
    }

    let bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges')
            process.exit(1)
            break
        case 'EADDRINUSE':
            console.error(bind + ' is already in use')
            process.exit(1)
            break
        default:
            throw error
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    let addr = server.address()
    let bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
    debug('Listening on ' + bind)
}
